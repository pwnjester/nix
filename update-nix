#!/usr/bin/env bash

__NAME__="h4rl's nix configuration: update-nix"
__AUTHOR__="h4rl"
__DESCRIPTION__="Updates the flake lock and applies the configuration to the system."
__LICENSE__="BSD 3-Clause License"
__VERSION__="0.1.0"

COLOR=true

if ${COLOR}; then
        ESCAPE=$(printf "\e")
        RED="${ESCAPE}[0;31m"
        GREEN="${ESCAPE}[0;32m"
        YELLOW="${ESCAPE}[1;33m"
        BLUE="${ESCAPE}[0;34m"
        CYAN="${ESCAPE}[0;36m"
        CLEAR="${ESCAPE}[0m"
fi

for arg in "$@"; do
        case ${arg} in
        "-mem" | "--memory" | "slow")
                MAX_JOBS="--max-jobs 2 --cores 6"
                echo -e "${YELLOW}!${CLEAR} Slow mode enabled"
                ;;
        "-omegamem" | "--omega-memory" | "slower")
                MAX_JOBS="--max-jobs 1 --cores 4"
                echo -e "${YELLOW}!${CLEAR} Slower mode enabled"
                ;;
        *)
                MAX_JOBS=""
                ;;
        esac
done

handle_failure() {
        local MESSAGE="${1}"

        if [[ -z ${MESSAGE} ]]; then
                echo "${RED}!${CLEAR} No failure message provided, are you using this right?"
                exit 1
        fi

        echo "${RED}!${CLEAR} ${MESSAGE}${CLEAR}"
        exit 1
}

pushd $HOME/.config/nix/ >/dev/null || handle_failure "Failed to pushd"

update_lock() {
        echo -e "${BLUE}>${CLEAR} Updating flake.lock.."
        if nix flake update; then
                echo -e "${GREEN}✓${CLEAR} Successfully updated flake.lock!"
        else
                echo -e "${RED}!${CLEAR} Somecthing went wrong updating flake.lock! \nError code: ${?}"
                exit 1
        fi
}

rebuild() {
        local SUB_CMD

        case ${2} in
        "boot")
                SUB_CMD="boot"
                ;;

        "test")
                SUB_CMD="test"
                ;;

        "build")
                SUB_CMD="build"
                ;;

        "dry-build")
                SUB_CMD="dry-build"
                ;;

        "dry-activate")
                SUB_CMD="dry-activate"
                ;;

        "edit")
                SUB_CMD="edit"
                ;;

        "repl")
                SUB_CMD="repl"
                ;;

        "build-vm")
                SUB_CMD="build-vm"
                ;;

        "build-vm-with-bootloader")
                SUB_CMD="build-vm-with-bootloader"
                ;;

        "build-image")
                SUB_CMD="build-image"
                ;;

        "list-generations")
                SUB_CMD="list-generations"
                ;;

        "switch" | *)
                SUB_CMD="switch"
                ;;
        esac
        echo -e "${BLUE}>${CLEAR} Rebuilding the NixOS configuration.."
        if sudo nixos-rebuild "${SUB_CMD}" --flake '.#' ${MAX_JOBS}; then
                echo -e "${GREEN}✓${CLEAR} Successfully reconfigured!"
        else
                echo -e "${RED}!${CLEAR} Somecthing went wrong reconfiguring! \nError code: ${?}"
                exit 1
        fi
}

update_entire_system() {
        update_lock
        rebuild "${@}"
}

case ${1} in
"lock")
        update_lock
        ;;

"rebuild")
        rebuild "${@}"
        ;;

"all" | *)
        update_entire_system "${@}"
        ;;
esac

echo -e "${GREEN}✓${CLEAR} Finished!"

popd >/dev/null || handle_failure "Failed to popd"
